

CREATE TABLE `layoffs_3` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` bigint DEFAULT NULL,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  row_num INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_3;

INSERT INTO layoffs_3
SELECT *,
    ROW_NUMBER() OVER(PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
    FROM layoffs_2;

SELECT *
FROM layoffs_3
where row_num >1;

DELETE
FROM layoffs_3
WHERE row_num > 1;

SELECT *
FROM layoffs_3
where row_num >1;

SELECT *
FROM layoffs_3;

UPDATE layoffs_3
SET company = TRIM(company);

SELECT distinct company
FROM layoffs_3;

SELECT distinct industry
FROM layoffs_3
ORDER BY 1;

UPDATE layoffs_3
SET industry = 'crypto'
WHERE industry LIKE 'crypto%';

SELECT distinct country
FROM layoffs_3
ORDER BY 1;

UPDATE layoffs_3
SET country = 'United States'
WHERE country = 'United States.';

UPDATE layoffs_3
SET `date` = str_to_date (`date`, '%m-%d-%y');

UPDATE layoffs_3
SET `date` = TO_DATE(`date`, 'YYYY-MM-DD');

ALTER TABLE your_table ADD converted_date DATE;

UPDATE layoffs_3
SET `date` = STR_TO_DATE('date', '%Y-%m-%d');

ALTER TABLE layoffs_3
MODIFY COLUMN `date` DATE;



SELECT *
FROM layoffs_3;

SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
FROM layoffs_3;

UPDATE layoffs_3
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

SELECT *
FROM layoffs_3
WHERE company = 'Juul';

SELECT *
FROM layoffs_3
WHERE industry IS NULL
OR industry = ''; 

UPDATE layoffs_3
SET industry = 'Consumer'
WHERE company = 'Juul';

UPDATE layoffs_3
SET industry = NULL
WHERE industry = '';

UPDATE layoffs_3 t1
JOIN layoffs_3 t2
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

SELECT *
FROM layoffs_3
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

DELETE 
FROM layoffs_3
WHERE total_laid_off IS NULL 
AND percentage_laid_off IS NULL;

SELECT *
FROM layoffs_3;

ALTER TABLE layoffs_3
DROP COLUMN row_num;

SELECT MAX(total_laid_off), MAX(percentage_laid_off)
FROM layoffs_3;

SELECT *
FROM layoffs_3
WHERE percentage_laid_off = 1;

SELECT sum(total_laid_off), company 
FROM layoffs_3
GROUP BY company
ORDER BY sum(total_laid_off) desc;


SELECT sum(total_laid_off), `date`
FROM layoffs_3
group by `date`
ORDER BY sum(total_laid_off) desc;

SELECT sum(total_laid_off), country
FROM layoffs_3
group by country
ORDER BY sum(total_laid_off) desc;


SELECT sum(total_laid_off), industry
FROM layoffs_3
group by industry
ORDER BY sum(total_laid_off) desc;

SELECT sum(total_laid_off), YEAR (`date`)
FROM layoffs_3
group by YEAR (`date`)
ORDER BY sum(total_laid_off) desc;

SELECT AVG(total_laid_off), YEAR (`date`)
FROM layoffs_3
group by YEAR (`date`)
ORDER BY sum(total_laid_off) desc;

SELECT SUBSTRING(`date`,1,7) AS `Month`, SUM(total_laid_off) AS Sum_total
FROM layoffs_3
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `Month`
ORDER BY `Month` ASC;






WITH Rolling_Total AS
(
SELECT SUBSTRING(`date`,1,7) AS `Month`, SUM(total_laid_off) AS Sum_total
FROM layoffs_3
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `Month`
ORDER BY `Month` ASC
)
SELECT `Month`, Sum_total, SUM(Sum_total) OVER(ORDER BY `Month`)
FROM Rolling_Total;


WITH company_year (company, years, total_laid_off) AS
(
SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_3
GROUP BY company, YEAR(`date`)
), Company_Year_Rank AS
(
SELECT *, DENSE_RANK() OVER(PARTITION BY years ORDER BY total_laid_off DESC) AS Ranking
FROM company_year
WHERE years IS NOT NULL 
) 
SELECT *
FROM Company_Year_Rank
WHERE ranking <= 5
;


